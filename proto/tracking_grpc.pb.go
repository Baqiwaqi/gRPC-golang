// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/tracking.proto

package golang_grpc_servive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightTrackingClient is the client API for FlightTracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightTrackingClient interface {
	GetFlight(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (*MyService_Flight_Response, error)
	StreamFlights(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (FlightTracking_StreamFlightsClient, error)
	ListFlights(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (*MyService_Flight_ListResponse, error)
}

type flightTrackingClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightTrackingClient(cc grpc.ClientConnInterface) FlightTrackingClient {
	return &flightTrackingClient{cc}
}

func (c *flightTrackingClient) GetFlight(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (*MyService_Flight_Response, error) {
	out := new(MyService_Flight_Response)
	err := c.cc.Invoke(ctx, "/flightTracking.FlightTracking/GetFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightTrackingClient) StreamFlights(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (FlightTracking_StreamFlightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlightTracking_ServiceDesc.Streams[0], "/flightTracking.FlightTracking/StreamFlights", opts...)
	if err != nil {
		return nil, err
	}
	x := &flightTrackingStreamFlightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlightTracking_StreamFlightsClient interface {
	Recv() (*MyService_Flight_Response, error)
	grpc.ClientStream
}

type flightTrackingStreamFlightsClient struct {
	grpc.ClientStream
}

func (x *flightTrackingStreamFlightsClient) Recv() (*MyService_Flight_Response, error) {
	m := new(MyService_Flight_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flightTrackingClient) ListFlights(ctx context.Context, in *MyService_Flight_Request, opts ...grpc.CallOption) (*MyService_Flight_ListResponse, error) {
	out := new(MyService_Flight_ListResponse)
	err := c.cc.Invoke(ctx, "/flightTracking.FlightTracking/ListFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightTrackingServer is the server API for FlightTracking service.
// All implementations must embed UnimplementedFlightTrackingServer
// for forward compatibility
type FlightTrackingServer interface {
	GetFlight(context.Context, *MyService_Flight_Request) (*MyService_Flight_Response, error)
	StreamFlights(*MyService_Flight_Request, FlightTracking_StreamFlightsServer) error
	ListFlights(context.Context, *MyService_Flight_Request) (*MyService_Flight_ListResponse, error)
	mustEmbedUnimplementedFlightTrackingServer()
}

// UnimplementedFlightTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedFlightTrackingServer struct {
}

func (UnimplementedFlightTrackingServer) GetFlight(context.Context, *MyService_Flight_Request) (*MyService_Flight_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightTrackingServer) StreamFlights(*MyService_Flight_Request, FlightTracking_StreamFlightsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFlights not implemented")
}
func (UnimplementedFlightTrackingServer) ListFlights(context.Context, *MyService_Flight_Request) (*MyService_Flight_ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlights not implemented")
}
func (UnimplementedFlightTrackingServer) mustEmbedUnimplementedFlightTrackingServer() {}

// UnsafeFlightTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightTrackingServer will
// result in compilation errors.
type UnsafeFlightTrackingServer interface {
	mustEmbedUnimplementedFlightTrackingServer()
}

func RegisterFlightTrackingServer(s grpc.ServiceRegistrar, srv FlightTrackingServer) {
	s.RegisterService(&FlightTracking_ServiceDesc, srv)
}

func _FlightTracking_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyService_Flight_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightTrackingServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flightTracking.FlightTracking/GetFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightTrackingServer).GetFlight(ctx, req.(*MyService_Flight_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightTracking_StreamFlights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MyService_Flight_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlightTrackingServer).StreamFlights(m, &flightTrackingStreamFlightsServer{stream})
}

type FlightTracking_StreamFlightsServer interface {
	Send(*MyService_Flight_Response) error
	grpc.ServerStream
}

type flightTrackingStreamFlightsServer struct {
	grpc.ServerStream
}

func (x *flightTrackingStreamFlightsServer) Send(m *MyService_Flight_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _FlightTracking_ListFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyService_Flight_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightTrackingServer).ListFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flightTracking.FlightTracking/ListFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightTrackingServer).ListFlights(ctx, req.(*MyService_Flight_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightTracking_ServiceDesc is the grpc.ServiceDesc for FlightTracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightTracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flightTracking.FlightTracking",
	HandlerType: (*FlightTrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlight",
			Handler:    _FlightTracking_GetFlight_Handler,
		},
		{
			MethodName: "ListFlights",
			Handler:    _FlightTracking_ListFlights_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFlights",
			Handler:       _FlightTracking_StreamFlights_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/tracking.proto",
}
